using UnityEngine;
using UnityEditor;
using System.IO;
using System.Text;
using System.Linq;

namespace TheOneStudio.DynamicUserDifficulty.Editor
{
    /// <summary>
    /// Automatic integration wizard for Dynamic Difficulty system
    /// </summary>
    public class DifficultyAutoIntegrator : EditorWindow
    {
        private string projectName = "MyGame";
        private string namespaceName = "MyGame.Gameplay";
        private string targetPath = "Assets/Scripts/Services/Difficulty";
        private bool createDebugUI = true;
        private bool createSampleIntegration = true;
        private bool enableFeatureFlag = true;

        [MenuItem("Tools/Dynamic Difficulty/Auto Integration Wizard")]
        public static void ShowWindow()
        {
            var window = GetWindow<DifficultyAutoIntegrator>("Difficulty Auto Integration");
            window.minSize = new Vector2(400, 350);
        }

        private void OnGUI()
        {
            GUILayout.Label("Dynamic Difficulty Auto Integration", EditorStyles.boldLabel);
            EditorGUILayout.Space();

            EditorGUILayout.HelpBox(
                "This wizard will automatically create all necessary files to integrate " +
                "the Dynamic Difficulty system into your project.",
                MessageType.Info);

            EditorGUILayout.Space();

            // Configuration options
            projectName = EditorGUILayout.TextField("Project Name:", projectName);
            namespaceName = EditorGUILayout.TextField("Namespace:", namespaceName);
            targetPath = EditorGUILayout.TextField("Target Path:", targetPath);

            EditorGUILayout.Space();

            createDebugUI = EditorGUILayout.Toggle("Create Debug UI", createDebugUI);
            createSampleIntegration = EditorGUILayout.Toggle("Create Sample Integration", createSampleIntegration);
            enableFeatureFlag = EditorGUILayout.Toggle("Enable Feature Flag", enableFeatureFlag);

            EditorGUILayout.Space();

            if (GUILayout.Button("Generate Integration", GUILayout.Height(30)))
            {
                GenerateIntegration();
            }

            EditorGUILayout.Space();

            EditorGUILayout.HelpBox(
                "Files to be created:\n" +
                $"• {targetPath}/{projectName}DifficultyAdapter.cs\n" +
                $"• {targetPath}/{projectName}DifficultyBridge.cs\n" +
                (createDebugUI ? $"• {targetPath}/{projectName}DifficultyDebugUI.cs\n" : "") +
                (createSampleIntegration ? $"• {targetPath}/SampleGameController.cs\n" : "") +
                "• Configuration asset in Resources/Configs/",
                MessageType.None);
        }

        private void GenerateIntegration()
        {
            Debug.Log("[AutoIntegrator] Starting integration generation...");

            // Create directory
            if (!Directory.Exists(targetPath))
            {
                Directory.CreateDirectory(targetPath);
                Debug.Log($"[AutoIntegrator] Created directory: {targetPath}");
            }

            // Generate files
            GenerateAdapter();
            GenerateBridge();

            if (createDebugUI)
            {
                GenerateDebugUI();
            }

            if (createSampleIntegration)
            {
                GenerateSampleController();
            }

            // Create configuration asset
            CreateConfigurationAsset();

            // Enable feature flag
            if (enableFeatureFlag)
            {
                EnableFeatureFlag();
            }

            // Update DI registration
            UpdateDIRegistration();

            AssetDatabase.Refresh();

            EditorUtility.DisplayDialog(
                "Integration Complete",
                $"Dynamic Difficulty has been integrated into {projectName}!\n\n" +
                "Next steps:\n" +
                "1. Review generated files in " + targetPath + "\n" +
                "2. Customize parameters in the adapter\n" +
                "3. Connect your game's win/loss events to the bridge\n" +
                "4. Test with F9 debug UI (if enabled)",
                "OK");

            Debug.Log("[AutoIntegrator] Integration complete!");
        }

        private void GenerateAdapter()
        {
            var content = $@"using UnityEngine;
using VContainer;
using TheOneStudio.DynamicUserDifficulty.Services;

namespace {namespaceName}
{{
    /// <summary>
    /// Adapts Dynamic Difficulty to {projectName} gameplay parameters
    /// Auto-generated by DifficultyAutoIntegrator
    /// </summary>
    public class {projectName}DifficultyAdapter
    {{
        private readonly IDynamicUserDifficultyService difficultyService;

        [Inject]
        public {projectName}DifficultyAdapter(IDynamicUserDifficultyService difficultyService)
        {{
            this.difficultyService = difficultyService;
        }}

        /// <summary>
        /// Get adjusted gameplay parameters based on current difficulty
        /// </summary>
        public GameplayParameters GetParameters()
        {{
            float difficulty = difficultyService.CurrentDifficulty;

            return new GameplayParameters
            {{
                // Customize these values for your game
                TimeLimit = 180f - ((difficulty - 1) * 13.33f), // 180s to 60s
                EnemyCount = Mathf.RoundToInt(3 + (difficulty - 1) * 0.77f), // 3 to 10
                PlayerHealth = Mathf.RoundToInt(5 - (difficulty - 1) * 0.44f), // 5 to 1
                ScoreMultiplier = 0.8f + ((difficulty - 1) * 0.044f), // 0.8x to 1.2x
                PowerUpChance = 0.5f - ((difficulty - 1) * 0.044f), // 50% to 10%
                DifficultyLevel = difficulty
            }};
        }}

        /// <summary>
        /// Get adjusted single value
        /// </summary>
        public float GetAdjustedValue(float baseValue, string type)
        {{
            float difficulty = difficultyService.CurrentDifficulty;
            float multiplier = 1f;

            switch (type)
            {{
                case ""time"":
                    multiplier = 2f - (difficulty - 1) / 9f; // More time on easy
                    break;
                case ""health"":
                    multiplier = 1.5f - (difficulty - 1) / 18f; // More health on easy
                    break;
                case ""damage"":
                    multiplier = 0.5f + (difficulty - 1) / 18f; // Less damage on easy
                    break;
                case ""reward"":
                    multiplier = 0.8f + (difficulty - 1) / 45f; // More rewards on hard
                    break;
            }}

            return baseValue * multiplier;
        }}
    }}

    /// <summary>
    /// Gameplay parameters structure
    /// </summary>
    public class GameplayParameters
    {{
        public float TimeLimit {{ get; set; }}
        public int EnemyCount {{ get; set; }}
        public int PlayerHealth {{ get; set; }}
        public float ScoreMultiplier {{ get; set; }}
        public float PowerUpChance {{ get; set; }}
        public float DifficultyLevel {{ get; set; }}
    }}
}}";

            File.WriteAllText($"{targetPath}/{projectName}DifficultyAdapter.cs", content);
            Debug.Log($"[AutoIntegrator] Generated adapter: {projectName}DifficultyAdapter.cs");
        }

        private void GenerateBridge()
        {
            var content = $@"using System;
using UnityEngine;
using VContainer;
using VContainer.Unity;
using TheOneStudio.DynamicUserDifficulty.Services;

namespace {namespaceName}
{{
    /// <summary>
    /// Bridges {projectName} game events with Dynamic Difficulty system
    /// Auto-generated by DifficultyAutoIntegrator
    /// </summary>
    public class {projectName}DifficultyBridge : IInitializable, IDisposable
    {{
        private readonly IDynamicUserDifficultyService difficultyService;
        private readonly {projectName}DifficultyAdapter adapter;

        private DateTime levelStartTime;

        [Inject]
        public {projectName}DifficultyBridge(
            IDynamicUserDifficultyService difficultyService,
            {projectName}DifficultyAdapter adapter)
        {{
            this.difficultyService = difficultyService;
            this.adapter = adapter;
        }}

        public void Initialize()
        {{
            Debug.Log($""[{projectName}DifficultyBridge] Initialized with difficulty: {{difficultyService.CurrentDifficulty}}"");

            // Load saved data
            difficultyService.LoadData();

            // TODO: Subscribe to your game's win/loss events here
            // Example:
            // GameEvents.OnLevelComplete += HandleLevelComplete;
            // GameEvents.OnLevelFailed += HandleLevelFailed;

            levelStartTime = DateTime.Now;
        }}

        /// <summary>
        /// Call this when player wins
        /// </summary>
        public void OnPlayerWon()
        {{
            var playDuration = (float)(DateTime.Now - levelStartTime).TotalSeconds;

            Debug.Log($""[{projectName}DifficultyBridge] Player won! Duration: {{playDuration:F1}}s"");

            // Record win and update difficulty
            difficultyService.RecordWin();
            difficultyService.OnLevelComplete(true, playDuration);

            // Calculate and apply new difficulty
            var result = difficultyService.CalculateDifficulty();
            difficultyService.ApplyDifficulty(result);

            // Save data
            difficultyService.SaveData();

            Debug.Log($""[{projectName}DifficultyBridge] New difficulty: {{difficultyService.CurrentDifficulty}}"");

            // Reset timer
            levelStartTime = DateTime.Now;
        }}

        /// <summary>
        /// Call this when player loses
        /// </summary>
        public void OnPlayerLost()
        {{
            var playDuration = (float)(DateTime.Now - levelStartTime).TotalSeconds;

            Debug.Log($""[{projectName}DifficultyBridge] Player lost! Duration: {{playDuration:F1}}s"");

            // Check for rage quit
            if (playDuration < 30f)
            {{
                Debug.Log($""[{projectName}DifficultyBridge] Rage quit detected!"");
            }}

            // Record loss and update difficulty
            difficultyService.RecordLoss();
            difficultyService.OnLevelComplete(false, playDuration);

            // Calculate and apply new difficulty
            var result = difficultyService.CalculateDifficulty();
            difficultyService.ApplyDifficulty(result);

            // Save data
            difficultyService.SaveData();

            Debug.Log($""[{projectName}DifficultyBridge] New difficulty: {{difficultyService.CurrentDifficulty}}"");

            // Reset timer
            levelStartTime = DateTime.Now;
        }}

        public void Dispose()
        {{
            // TODO: Unsubscribe from events
            // GameEvents.OnLevelComplete -= HandleLevelComplete;
            // GameEvents.OnLevelFailed -= HandleLevelFailed;

            // Save data
            difficultyService.SaveData();
        }}
    }}
}}";

            File.WriteAllText($"{targetPath}/{projectName}DifficultyBridge.cs", content);
            Debug.Log($"[AutoIntegrator] Generated bridge: {projectName}DifficultyBridge.cs");
        }

        private void GenerateDebugUI()
        {
            var content = $@"using UnityEngine;
using VContainer;
using TheOneStudio.DynamicUserDifficulty.Services;

namespace {namespaceName}
{{
    /// <summary>
    /// Debug UI for {projectName} Dynamic Difficulty (Press F9)
    /// Auto-generated by DifficultyAutoIntegrator
    /// </summary>
    public class {projectName}DifficultyDebugUI : MonoBehaviour
    {{
        private IDynamicUserDifficultyService difficultyService;
        private {projectName}DifficultyAdapter adapter;
        private {projectName}DifficultyBridge bridge;

        private bool showUI = true;

        [Inject]
        public void Construct(
            IDynamicUserDifficultyService difficultyService,
            {projectName}DifficultyAdapter adapter,
            {projectName}DifficultyBridge bridge)
        {{
            this.difficultyService = difficultyService;
            this.adapter = adapter;
            this.bridge = bridge;
        }}

        private void Update()
        {{
            if (Input.GetKeyDown(KeyCode.F9))
            {{
                showUI = !showUI;
            }}
        }}

        private void OnGUI()
        {{
            #if UNITY_EDITOR || DEVELOPMENT_BUILD
            if (!showUI || difficultyService == null) return;

            var stats = difficultyService.GetDifficultyStats();
            var parameters = adapter.GetParameters();

            GUI.Box(new Rect(10, 10, 250, 200), ""Dynamic Difficulty"");

            int y = 30;
            GUI.Label(new Rect(20, y, 230, 20), $""Difficulty: {{stats[""CurrentDifficulty""]:F1}}"");
            y += 20;
            GUI.Label(new Rect(20, y, 230, 20), $""Win Streak: {{stats[""WinStreak""]}}"");
            y += 20;
            GUI.Label(new Rect(20, y, 230, 20), $""Loss Streak: {{stats[""LossStreak""]}}"");
            y += 25;

            GUI.Label(new Rect(20, y, 230, 20), ""Parameters:"");
            y += 20;
            GUI.Label(new Rect(20, y, 230, 20), $""Time: {{parameters.TimeLimit:F0}}s"");
            y += 20;
            GUI.Label(new Rect(20, y, 230, 20), $""Enemies: {{parameters.EnemyCount}}"");
            y += 20;
            GUI.Label(new Rect(20, y, 230, 20), $""Score: {{parameters.ScoreMultiplier:F2}}x"");

            #if UNITY_EDITOR
            y += 25;
            if (GUI.Button(new Rect(20, y, 60, 22), ""Win""))
            {{
                bridge.OnPlayerWon();
            }}
            if (GUI.Button(new Rect(85, y, 60, 22), ""Loss""))
            {{
                bridge.OnPlayerLost();
            }}
            if (GUI.Button(new Rect(150, y, 60, 22), ""Reset""))
            {{
                PlayerPrefs.DeleteKey(""DUD_CurrentDifficulty"");
                PlayerPrefs.DeleteKey(""DUD_WinStreak"");
                PlayerPrefs.DeleteKey(""DUD_LossStreak"");
                difficultyService.LoadData();
            }}
            #endif
            #endif
        }}
    }}
}}";

            File.WriteAllText($"{targetPath}/{projectName}DifficultyDebugUI.cs", content);
            Debug.Log($"[AutoIntegrator] Generated debug UI: {projectName}DifficultyDebugUI.cs");
        }

        private void GenerateSampleController()
        {
            var content = $@"using UnityEngine;
using VContainer;
using UnityEngine.UI;

namespace {namespaceName}
{{
    /// <summary>
    /// Sample game controller showing how to use Dynamic Difficulty
    /// Auto-generated by DifficultyAutoIntegrator
    /// </summary>
    public class SampleGameController : MonoBehaviour
    {{
        [Header(""UI References"")]
        [SerializeField] private Text difficultyText;
        [SerializeField] private Text timerText;
        [SerializeField] private Button winButton;
        [SerializeField] private Button loseButton;

        private {projectName}DifficultyAdapter adapter;
        private {projectName}DifficultyBridge bridge;

        private float remainingTime;
        private bool isPlaying = true;

        [Inject]
        public void Construct(
            {projectName}DifficultyAdapter adapter,
            {projectName}DifficultyBridge bridge)
        {{
            this.adapter = adapter;
            this.bridge = bridge;
        }}

        private void Start()
        {{
            // Get difficulty parameters
            var parameters = adapter.GetParameters();

            // Set up game based on difficulty
            remainingTime = parameters.TimeLimit;

            // Setup UI
            if (winButton != null)
                winButton.onClick.AddListener(OnWinButtonClick);
            if (loseButton != null)
                loseButton.onClick.AddListener(OnLoseButtonClick);

            UpdateUI();

            Debug.Log($""[SampleGameController] Started with difficulty parameters:"");
            Debug.Log($""  Time Limit: {{parameters.TimeLimit}}s"");
            Debug.Log($""  Enemy Count: {{parameters.EnemyCount}}"");
            Debug.Log($""  Player Health: {{parameters.PlayerHealth}}"");
            Debug.Log($""  Score Multiplier: {{parameters.ScoreMultiplier}}x"");
        }}

        private void Update()
        {{
            if (!isPlaying) return;

            // Update timer
            remainingTime -= Time.deltaTime;
            if (remainingTime <= 0)
            {{
                OnTimeout();
            }}

            UpdateUI();
        }}

        private void OnWinButtonClick()
        {{
            if (!isPlaying) return;

            Debug.Log(""[SampleGameController] Player won!"");
            bridge.OnPlayerWon();
            RestartLevel();
        }}

        private void OnLoseButtonClick()
        {{
            if (!isPlaying) return;

            Debug.Log(""[SampleGameController] Player lost!"");
            bridge.OnPlayerLost();
            RestartLevel();
        }}

        private void OnTimeout()
        {{
            Debug.Log(""[SampleGameController] Time out - player lost!"");
            bridge.OnPlayerLost();
            RestartLevel();
        }}

        private void RestartLevel()
        {{
            // Get new difficulty parameters
            var parameters = adapter.GetParameters();
            remainingTime = parameters.TimeLimit;
            isPlaying = true;

            Debug.Log(""[SampleGameController] Level restarted with new difficulty"");
            UpdateUI();
        }}

        private void UpdateUI()
        {{
            if (difficultyText != null)
            {{
                var parameters = adapter.GetParameters();
                difficultyText.text = $""Difficulty: {{parameters.DifficultyLevel:F1}}"";
            }}

            if (timerText != null)
            {{
                timerText.text = $""Time: {{remainingTime:F0}}s"";
            }}
        }}

        private void OnDestroy()
        {{
            if (winButton != null)
                winButton.onClick.RemoveAllListeners();
            if (loseButton != null)
                loseButton.onClick.RemoveAllListeners();
        }}
    }}
}}";

            File.WriteAllText($"{targetPath}/SampleGameController.cs", content);
            Debug.Log($"[AutoIntegrator] Generated sample controller: SampleGameController.cs");
        }

        private void CreateConfigurationAsset()
        {
            var configPath = "Assets/Resources/Configs";
            if (!Directory.Exists(configPath))
            {
                Directory.CreateDirectory("Assets/Resources");
                Directory.CreateDirectory(configPath);
            }

            var assetPath = $"{configPath}/DifficultyConfig.asset";
            if (!File.Exists(assetPath))
            {
                // Create a default config
                var config = ScriptableObject.CreateInstance<Configuration.DifficultyConfig>();
                AssetDatabase.CreateAsset(config, assetPath);
                Debug.Log($"[AutoIntegrator] Created configuration asset: {assetPath}");
            }
            else
            {
                Debug.Log($"[AutoIntegrator] Configuration already exists: {assetPath}");
            }
        }

        private void EnableFeatureFlag()
        {
            var defines = PlayerSettings.GetScriptingDefineSymbolsForGroup(EditorUserBuildSettings.selectedBuildTargetGroup);
            if (!defines.Contains("THEONE_DYNAMIC_DIFFICULTY"))
            {
                defines += ";THEONE_DYNAMIC_DIFFICULTY";
                PlayerSettings.SetScriptingDefineSymbolsForGroup(EditorUserBuildSettings.selectedBuildTargetGroup, defines);
                Debug.Log("[AutoIntegrator] Enabled THEONE_DYNAMIC_DIFFICULTY flag");
            }
        }

        private void UpdateDIRegistration()
        {
            var registrationCode = $@"
#if THEONE_DYNAMIC_DIFFICULTY
// Dynamic Difficulty Integration
builder.Register<{projectName}DifficultyAdapter>(Lifetime.Singleton);
builder.RegisterEntryPoint<{projectName}DifficultyBridge>();

#if UNITY_EDITOR || DEVELOPMENT_BUILD
builder.RegisterComponentOnNewGameObject<{projectName}DifficultyDebugUI>(Lifetime.Singleton)
    .DontDestroyOnLoad();
#endif
#endif";

            var instructionPath = $"{targetPath}/DI_REGISTRATION_INSTRUCTIONS.txt";
            File.WriteAllText(instructionPath, $@"ADD THIS CODE TO YOUR VCONTAINER REGISTRATION:

In your LifetimeScope or VContainer configuration class, add:

{registrationCode}

Also add at the top of the file:
#if THEONE_DYNAMIC_DIFFICULTY
using {namespaceName};
using TheOneStudio.DynamicUserDifficulty.DI;
using TheOneStudio.DynamicUserDifficulty.Configuration;
#endif

And in the Configure/Install method:
#if THEONE_DYNAMIC_DIFFICULTY
var difficultyConfig = Resources.Load<DifficultyConfig>(""Configs/DifficultyConfig"");
if (difficultyConfig != null)
{{
    builder.RegisterModule(new DynamicDifficultyModule(difficultyConfig));
}}
#endif
");

            Debug.Log($"[AutoIntegrator] DI registration instructions saved to: {instructionPath}");
        }
    }
}